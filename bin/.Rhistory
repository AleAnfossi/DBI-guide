newdata <- apply(newdata, 2, as.double)
newdata <-t(newdata)
cl <- as.integer(clusters)
scatter_data <- cls.scatt.data(t(newdata), cl, dist = "euclidean")
#Calculation indexes
db_index_avg <- clv.Davies.Bouldin(scatter_data, intracls = "average", intercls = "centroid")
#I want three digits after comma
db_index_avg <- format( db_index_avg, nsmall = 3, digits = 3, scientific = FALSE)
# Return as a named data frame
return(db_index_avg)
}
# Apply the DBIndexes function
result <- DBIndexes(data[, 1:2], data$cluster)
installed_packages <- installed.packages()[, "Package"]
for (pkg in installed_packages) { suppressPackageStartupMessages(library(pkg, character.only = TRUE)) }
library(translations, lib.loc = "C:/Program Files/R/R-4.3.3/library")
# Set seed for reproducibility
set.seed(42)
# Parameters for the half-donut cluster
n_donut <- 300  # Number of points in the half-donut
r_inner <- 3    # Inner radius of the half-donut
r_outer <- 5    # Outer radius of the half-donut
# Generate half-donut points using polar coordinates
theta_donut <- runif(n_donut, 0, pi)  # Restrict to 0 to pi for a half-donut
r_donut <- sqrt(runif(n_donut, r_inner^2, r_outer^2))
x_donut <- r_donut * cos(theta_donut)
y_donut <- r_donut * sin(theta_donut)
# Parameters for the center cluster
n_center <- 300  # Number of points in the center
center_mean <- c(0, 0)  # Mean of the center cluster
center_sd <- 1         # Standard deviation of the center cluster
# Generate center points
x_center <- rnorm(n_center, mean = center_mean[1], sd = center_sd)
y_center <- rnorm(n_center, mean = center_mean[2], sd = center_sd)
# Combine the two clusters into a data frame
data <- data.frame(
x = c(x_donut, x_center),
y = c(y_donut, y_center),
cluster = factor(c(rep("Half-Donut", n_donut), rep("Center", n_center)))
)
DBIndexes <- function(data, clusters) {
#I need to "process" the data before
newdata <- as.matrix(data)
newdata <- apply(newdata, 2, as.double)
newdata <-t(newdata)
cl <- as.integer(clusters)
scatter_data <- cls.scatt.data(t(newdata), cl, dist = "euclidean")
#Calculation indexes
db_index_avg <- clv.Davies.Bouldin(scatter_data, intracls = "average", intercls = "centroid")
#I want three digits after comma
db_index_avg <- format( db_index_avg, nsmall = 3, digits = 3, scientific = FALSE)
# Return as a named data frame
return(db_index_avg)
}
# Apply the DBIndexes function
result <- DBIndexes(data[, 1:2], data$cluster)
# Prepare results for display
result_text <- paste("Davies-Bouldin Index:", result)
# Create the plot with a grey theme
plot <- ggplot(data, aes(x = x, y = y, color = cluster)) +
geom_point(alpha = 0.7) +
theme_minimal(base_family = "Arial") +
theme_grey() +
labs(title = "2D Half-Donut and Ball",
x = "X-coordinate",
y = "Y-coordinate",
color = "Cluster") +
coord_equal()
# Create a text grob for the result
result_grob <- grid::textGrob(result_text, gp = grid::gpar(fontsize = 14, fontfamily = "Arial"))
# Arrange the plot and the result
gridExtra::grid.arrange(plot, result_grob, ncol = 1, heights = c(3, 1))
# Set seed for reproducibility
set.seed(42)
# Parameters for the "S" curves
n_points <- 300            # Number of points per cluster
t_min <- -pi               # Minimum parameter value
t_max <- pi                # Maximum parameter value
offset <- 0.5              # Offset between the two "S" shapes
noise_sd <- 0.1            # Noise to add to the points
# Generate the first "S" curve
t1 <- seq(t_min, t_max, length.out = n_points)
x1 <- t1
y1 <- sin(t1) + rnorm(n_points, mean = 0, sd = noise_sd)
# Generate the second "S" curve (parallel to the first)
t2 <- seq(t_min, t_max, length.out = n_points)
x2 <- t2
y2 <- sin(t2) + offset + rnorm(n_points, mean = 0, sd = noise_sd)
# Combine the two clusters into a data frame
data <- data.frame(
x = c(x1, x2),
y = c(y1, y2),
cluster = factor(c(rep("Cluster 1", n_points), rep("Cluster 2", n_points)))
)
DBIndexes <- function(data, clusters) {
#I need to "process" the data before
newdata <- as.matrix(data)
newdata <- apply(newdata, 2, as.double)
newdata <-t(newdata)
cl <- as.integer(clusters)
scatter_data <- cls.scatt.data(t(newdata), cl, dist = "euclidean")
#Calculation indexes
db_index_avg <- clv.Davies.Bouldin(scatter_data, intracls = "average", intercls = "centroid")
#I want three digits after comma
db_index_avg <- format( db_index_avg, nsmall = 3, digits = 3, scientific = FALSE)
# Return as a named data frame
return(db_index_avg)
}
# Apply the DBIndexes function
result <- DBIndexes(data[, 1:2], data$cluster)
# Prepare results for display
result_text <- paste("Davies-Bouldin Index:", result)
# Create the plot with a grey theme
plot <- ggplot(data, aes(x = x, y = y, color = cluster)) +
geom_point(alpha = 0.7) +
theme_minimal(base_family = "Arial") +
theme_grey() +
labs(title = "'S'isters Clusters",
x = "X-coordinate",
y = "Y-coordinate",
color = "Cluster") +
coord_equal()
# Create a text grob for the result
result_grob <- grid::textGrob(result_text, gp = grid::gpar(fontsize = 14, fontfamily = "Arial"))
# Arrange the plot and the result
gridExtra::grid.arrange(plot, result_grob, ncol = 1, heights = c(3, 1))
# Set seed for reproducibility
set.seed(42)
# Parameters for the three clusters
n_points <- 200                # Number of points per cluster
means <- list(c(2, 0.5), c(-20, 0), c(2, -0.5))  # Centroids of the clusters
sd <- 0.5                      # Standard deviation for all clusters
# Generate points for each cluster
x1 <- rnorm(n_points, mean = means[[1]][1], sd = sd)
y1 <- rnorm(n_points, mean = means[[1]][2], sd = sd)
x2 <- rnorm(n_points, mean = means[[2]][1], sd = sd)
y2 <- rnorm(n_points, mean = means[[2]][2], sd = sd)
x3 <- rnorm(n_points, mean = means[[3]][1], sd = sd)
y3 <- rnorm(n_points, mean = means[[3]][2], sd = sd)
# Combine the three clusters into a data frame
data <- data.frame(
x = c(x1, x2, x3),
y = c(y1, y2, y3),
cluster = factor(c(rep("Cluster 1", n_points),
rep("Cluster 2", n_points),
rep("Cluster 3", n_points)))
)
# Update labels to merge Cluster 2 and Cluster 3
data$cluster <- factor(ifelse(data$cluster == "Cluster 3", "Cluster 2", as.character(data$cluster)))
DBIndexes <- function(data, clusters) {
#I need to "process" the data before
newdata <- as.matrix(data)
newdata <- apply(newdata, 2, as.double)
newdata <-t(newdata)
cl <- as.integer(clusters)
scatter_data <- cls.scatt.data(t(newdata), cl, dist = "euclidean")
#Calculation indexes
db_index_avg <- clv.Davies.Bouldin(scatter_data, intracls = "average", intercls = "centroid")
#I want three digits after comma
db_index_avg <- format( db_index_avg, nsmall = 3, digits = 3, scientific = FALSE)
# Return as a named data frame
return(db_index_avg)
}
# Apply the DBIndexes function
result <- DBIndexes(data[, 1:2], data$cluster)
# Prepare results for display
result_text <- paste("Davies-Bouldin Index:", result)
# Create the plot with a grey theme
plot <- ggplot(data, aes(x = x, y = y, color = cluster)) +
geom_point(alpha = 0.7) +
theme_minimal(base_family = "Arial") +
theme(panel.background = element_rect(fill = "grey", color = NA)) +
labs(title = "Two Distinct Clusters",
x = "X-coordinate",
y = "Y-coordinate",
color = "Cluster") +
coord_equal()
# Create a text grob for the result
result_grob <- grid::textGrob(result_text, gp = grid::gpar(fontsize = 14, fontfamily = "Arial"))
# Arrange the plot and the result
gridExtra::grid.arrange(plot, result_grob, ncol = 1, heights = c(3, 1))
# Set seed for reproducibility
set.seed(42)
# Parameters for the donut cluster
n_donut <- 300  # Number of points in the donut
r_inner <- 3    # Inner radius of the donut
r_outer <- 5    # Outer radius of the donut
# Generate donut points using polar coordinates
theta_donut <- runif(n_donut, 0, 2 * pi)
r_donut <- sqrt(runif(n_donut, r_inner^2, r_outer^2))
x_donut <- r_donut * cos(theta_donut)
y_donut <- r_donut * sin(theta_donut)
# Parameters for the center cluster
n_center <- 300  # Number of points in the center
center_mean <- c(0, 0)  # Mean of the center cluster
center_sd <- 1         # Standard deviation of the center cluster
# Generate center points
x_center <- rnorm(n_center, mean = center_mean[1], sd = center_sd)
y_center <- rnorm(n_center, mean = center_mean[2], sd = center_sd)
# Combine the two clusters into a data frame
data <- data.frame(
x = c(x_donut, x_center),
y = c(y_donut, y_center),
cluster = factor(c(rep("Donut", n_donut), rep("Center", n_center)))
)
DBIndexes <- function(data, clusters) {
#I need to "process" the data before
newdata <- as.matrix(data)
newdata <- apply(newdata, 2, as.double)
newdata <-t(newdata)
cl <- as.integer(clusters)
scatter_data <- cls.scatt.data(t(newdata), cl, dist = "euclidean")
#Calculation indexes
db_index_avg <- clv.Davies.Bouldin(scatter_data, intracls = "average", intercls = "centroid")
#I want three digits after comma
db_index_avg <- format( db_index_avg, nsmall = 3, digits = 3, scientific = FALSE)
# Return as a named data frame
return(db_index_avg)
}
# Apply the DBIndexes function
result <- DBIndexes(data[, 1:2], data$cluster)
# Prepare results for display
result_text <- paste("Davies-Bouldin Index:", result)
# Create the plot with a grey theme
plot <- ggplot(data, aes(x = x, y = y, color = cluster)) +
geom_point(alpha = 0.7) +
theme_minimal(base_family = "Arial") +
theme_grey() +
labs(title = "2D Donut and Ball",
x = "X-coordinate",
y = "Y-coordinate",
color = "Cluster") +
coord_equal()
# Create a text grob for the result
result_grob <- grid::textGrob(result_text, gp = grid::gpar(fontsize = 14, fontfamily = "Arial"))
# Arrange the plot and the result
gridExtra::grid.arrange(plot, result_grob, ncol = 1, heights = c(3, 1))
# Set seed for reproducibility
set.seed(42)
# Parameters for the two clusters
n_points <- 300  # Number of points per cluster
cluster1_mean <- c(-2.5, 0)  # Center of the first cluster
cluster2_mean <- c(2.5, 0)   # Center of the second cluster
cluster_sd <- 4           # Standard deviation for both clusters (large overlap)
# Generate points for cluster 1
x1 <- rnorm(n_points, mean = cluster1_mean[1], sd = cluster_sd)
y1 <- rnorm(n_points, mean = cluster1_mean[2], sd = cluster_sd)
# Generate points for cluster 2
x2 <- rnorm(n_points, mean = cluster2_mean[1], sd = cluster_sd)
y2 <- rnorm(n_points, mean = cluster2_mean[2], sd = cluster_sd)
# Combine the two clusters into a data frame
data <- data.frame(
x = c(x1, x2),
y = c(y1, y2),
cluster = factor(c(rep("Cluster 1", n_points), rep("Cluster 2", n_points)))
)
DBIndexes <- function(data, clusters) {
#I need to "process" the data before
newdata <- as.matrix(data)
newdata <- apply(newdata, 2, as.double)
newdata <-t(newdata)
cl <- as.integer(clusters)
scatter_data <- cls.scatt.data(t(newdata), cl, dist = "euclidean")
#Calculation indexes
db_index_avg <- clv.Davies.Bouldin(scatter_data, intracls = "average", intercls = "centroid")
#I want three digits after comma
db_index_avg <- format( db_index_avg, nsmall = 3, digits = 3, scientific = FALSE)
# Return as a named data frame
return(db_index_avg)
}
# Apply the DBIndexes function
result <- DBIndexes(data[, 1:2], data$cluster)
# Prepare results for display
result_text <- paste("Davies-Bouldin Index:", result)
# Create the plot with a grey theme
plot <- ggplot(data, aes(x = x, y = y, color = cluster)) +
geom_point(alpha = 0.7) +
theme_minimal(base_family = "Arial") +
theme_grey()+
labs(title = "Two Highly Mixed Clusters",
x = "X-coordinate",
y = "Y-coordinate",
color = "Cluster") +
coord_equal()
# Create a text grob for the result
result_grob <- grid::textGrob(result_text, gp = grid::gpar(fontsize = 14, fontfamily = "Arial"))
# Arrange the plot and the result
gridExtra::grid.arrange(plot, result_grob, ncol = 1, heights = c(3, 1))
# Set seed for reproducibility
set.seed(42)
# Parameters for the two clusters
n_cluster1 <- 300  # Number of points in the first cluster
n_cluster2 <- 300  # Number of points in the second cluster
mean1 <- c(2.5, 0)   # Centroid of the first cluster
mean2 <- c(-2.5, 0)  # Centroid of the second cluster
sd_x <- 3        # Increased standard deviation for the x-coordinates (more overlap)
sd_y <- 1        # Small standard deviation for the y-coordinates (still near the line)
# Generate points for the first cluster
x_cluster1 <- rnorm(n_cluster1, mean = mean1[1], sd = sd_x)
y_cluster1 <- rnorm(n_cluster1, mean = mean1[2], sd = sd_y)
# Generate points for the second cluster
x_cluster2 <- rnorm(n_cluster2, mean = mean2[1], sd = sd_x)
y_cluster2 <- rnorm(n_cluster2, mean = mean2[2], sd = sd_y)
# Combine the two clusters into a data frame
data <- data.frame(
x = c(x_cluster1, x_cluster2),
y = c(y_cluster1, y_cluster2),
cluster = factor(c(rep("Cluster 1", n_cluster1), rep("Cluster 2", n_cluster2)))
)
DBIndexes <- function(data, clusters) {
#I need to "process" the data before
newdata <- as.matrix(data)
newdata <- apply(newdata, 2, as.double)
newdata <-t(newdata)
cl <- as.integer(clusters)
scatter_data <- cls.scatt.data(t(newdata), cl, dist = "euclidean")
#Calculation indexes
db_index_avg <- clv.Davies.Bouldin(scatter_data, intracls = "average", intercls = "centroid")
#I want three digits after comma
db_index_avg <- format( db_index_avg, nsmall = 3, digits = 3, scientific = FALSE)
# Return as a named data frame
return(db_index_avg)
}
# Apply the DBI function
result <- DBIndexes(data[, 1:2], data$cluster)
# Prepare results for display
result_text <- paste("Davies-Bouldin Index:", result)
# Create the plot with a grey theme
plot <- ggplot(data, aes(x = x, y = y, color = cluster)) +
geom_point(alpha = 0.7) +
theme_minimal(base_family = "Arial") +
theme_grey() +
labs(title = "Two Highly Mixed Clusters on a Line",
x = "X-coordinate",
y = "Y-coordinate",
color = "Cluster") +
coord_equal()
# Create a text grob for the result
result_grob <- grid::textGrob(result_text, gp = grid::gpar(fontsize = 14, fontfamily = "Arial"))
# Arrange the plot and the result
gridExtra::grid.arrange(plot, result_grob, ncol = 1, heights = c(3, 1))
# Set seed for reproducibility
set.seed(42)
# Parameters for the four clusters
n_points <- 200                # Number of points per cluster
means <- list(c(2, 0.5), c(-20, 0), c(2, -0.5), c(-5, -2))  # Centroids of the clusters
sd <- 0.5                      # Standard deviation for all clusters
# Generate points for each cluster
x1 <- rnorm(n_points, mean = means[[1]][1], sd = sd)
y1 <- rnorm(n_points, mean = means[[1]][2], sd = sd)
x2 <- rnorm(n_points, mean = means[[2]][1], sd = sd)
y2 <- rnorm(n_points, mean = means[[2]][2], sd = sd)
x3 <- rnorm(n_points, mean = means[[3]][1], sd = sd)
y3 <- rnorm(n_points, mean = means[[3]][2], sd = sd)
x4 <- rnorm(n_points, mean = means[[4]][1], sd = sd)
y4 <- rnorm(n_points, mean = means[[4]][2], sd = sd)
# Combine the four clusters into a data frame
# Assign the new cluster (Cluster 4) to Cluster 2
data <- data.frame(
x = c(x1, x2, x3, x4),
y = c(y1, y2, y3, y4),
cluster = factor(c(rep("Cluster 1", n_points),
rep("Cluster 2", n_points),
rep("Cluster 3", n_points),
rep("Cluster 2", n_points)))  # Merge Cluster 4 into Cluster 2
)
DBIndexes <- function(data, clusters) {
#I need to "process" the data before
newdata <- as.matrix(data)
newdata <- apply(newdata, 2, as.double)
newdata <-t(newdata)
cl <- as.integer(clusters)
scatter_data <- cls.scatt.data(t(newdata), cl, dist = "euclidean")
#Calculation indexes
db_index_avg <- clv.Davies.Bouldin(scatter_data, intracls = "average", intercls = "centroid")
#I want three digits after comma
db_index_avg <- format( db_index_avg, nsmall = 3, digits = 3, scientific = FALSE)
# Return as a named data frame
return(db_index_avg)
}
# Apply the DBIndexes function
result <- DBIndexes(data[, 1:2], data$cluster)
# Prepare results for display
result_text <- paste("Davies-Bouldin Index:", result)
# Create the plot with a grey theme
plot <- ggplot(data, aes(x = x, y = y, color = cluster)) +
geom_point(alpha = 0.7) +
theme_minimal(base_family = "Arial") +
theme_grey() +
labs(title = "Clusters with Merged Cloud",
x = "X-coordinate",
y = "Y-coordinate",
color = "Cluster") +
coord_equal()
# Create a text grob for the result
result_grob <- grid::textGrob(result_text, gp = grid::gpar(fontsize = 14, fontfamily = "Arial"))
# Arrange the plot and the result
gridExtra::grid.arrange(plot, result_grob, ncol = 1, heights = c(3, 1))
# Set seed for reproducibility
set.seed(42)
# Parameters for the four clusters
n_points <- 200                # Number of points per cluster
means <- list(c(2, 0.5), c(-20, 0), c(2, -0.5), c(-5, -2))  # Centroids of the clusters
sd <- 0.5                      # Standard deviation for all clusters
# Generate points for each cluster
x1 <- rnorm(n_points, mean = means[[1]][1], sd = sd)
y1 <- rnorm(n_points, mean = means[[1]][2], sd = sd)
x2 <- rnorm(n_points, mean = means[[2]][1], sd = sd)
y2 <- rnorm(n_points, mean = means[[2]][2], sd = sd)
x3 <- rnorm(n_points, mean = means[[3]][1], sd = sd)
y3 <- rnorm(n_points, mean = means[[3]][2], sd = sd)
x4 <- rnorm(n_points, mean = means[[4]][1], sd = sd)
y4 <- rnorm(n_points, mean = means[[4]][2], sd = sd)
# Combine the four clusters into a data frame
# Assign the new cluster (Cluster 4) to Cluster 3
data <- data.frame(
x = c(x1, x2, x3, x4),
y = c(y1, y2, y3, y4),
cluster = factor(c(rep("Cluster 1", n_points),
rep("Cluster 2", n_points),
rep("Cluster 3", n_points),
rep("Cluster 3", n_points)))  # Merge Cluster 4 into Cluster 3
)
DBIndexes <- function(data, clusters) {
#I need to "process" the data before
newdata <- as.matrix(data)
newdata <- apply(newdata, 2, as.double)
newdata <-t(newdata)
cl <- as.integer(clusters)
scatter_data <- cls.scatt.data(t(newdata), cl, dist = "euclidean")
#Calculation indexes
db_index_avg <- clv.Davies.Bouldin(scatter_data, intracls = "average", intercls = "centroid")
#I want three digits after comma
db_index_avg <- format( db_index_avg, nsmall = 3, digits = 3, scientific = FALSE)
# Return as a named data frame
return(db_index_avg)
}
# Apply the DBIndexes function
result <- DBIndexes(data[, 1:2], data$cluster)
# Prepare results for display
result_text <- paste("Davies-Bouldin Index:", result)
# Create the plot with a grey theme
plot <- ggplot(data, aes(x = x, y = y, color = cluster)) +
geom_point(alpha = 0.7) +
theme_minimal(base_family = "Arial") +
theme_grey() +
labs(title = "Clusters with Merged Cloud",
x = "X-coordinate",
y = "Y-coordinate",
color = "Cluster") +
coord_equal()
# Create a text grob for the result
result_grob <- grid::textGrob(result_text, gp = grid::gpar(fontsize = 14, fontfamily = "Arial"))
# Arrange the plot and the result
gridExtra::grid.arrange(plot, result_grob, ncol = 1, heights = c(3, 1))
# Set seed for reproducibility
set.seed(42)
# Parameters for the four clusters
n_points <- 200                # Number of points per cluster
means <- list(c(2, 0.5), c(-20, 0), c(2, -0.5), c(-5, -2))  # Centroids of the clusters
sd <- 0.5                      # Standard deviation for all clusters
# Generate points for each cluster
x1 <- rnorm(n_points, mean = means[[1]][1], sd = sd)
y1 <- rnorm(n_points, mean = means[[1]][2], sd = sd)
x2 <- rnorm(n_points, mean = means[[2]][1], sd = sd)
y2 <- rnorm(n_points, mean = means[[2]][2], sd = sd)
x3 <- rnorm(n_points, mean = means[[3]][1], sd = sd)
y3 <- rnorm(n_points, mean = means[[3]][2], sd = sd)
x4 <- rnorm(n_points, mean = means[[4]][1], sd = sd)
y4 <- rnorm(n_points, mean = means[[4]][2], sd = sd)
# Combine the four clusters into a data frame
# Assign the extreme left ball (Cluster 2) to Cluster 3, while the new middle ball stays in Cluster 2
data <- data.frame(
x = c(x1, x2, x3, x4),
y = c(y1, y2, y3, y4),
cluster = factor(c(rep("Cluster 1", n_points),
rep("Cluster 3", n_points),  # Move extreme left ball to Cluster 3
rep("Cluster 3", n_points),  # Keep original Cluster 3
rep("Cluster 2", n_points)))  # Keep new middle ball in Cluster 2
)
DBIndexes <- function(data, clusters) {
#I need to "process" the data before
newdata <- as.matrix(data)
newdata <- apply(newdata, 2, as.double)
newdata <-t(newdata)
cl <- as.integer(clusters)
scatter_data <- cls.scatt.data(t(newdata), cl, dist = "euclidean")
#Calculation indexes
db_index_avg <- clv.Davies.Bouldin(scatter_data, intracls = "average", intercls = "centroid")
#I want three digits after comma
db_index_avg <- format( db_index_avg, nsmall = 3, digits = 3, scientific = FALSE)
# Return as a named data frame
return(db_index_avg)
}
# Apply the DBIndexes function
result <- DBIndexes(data[, 1:2], data$cluster)
# Prepare results for display
result_text <- paste("Davies-Bouldin Index:", result)
# Create the plot with a grey theme
plot <- ggplot(data, aes(x = x, y = y, color = cluster)) +
geom_point(alpha = 0.7) +
theme_minimal(base_family = "Arial") +
theme_grey() +
labs(title = "Clusters with Merged Cloud",
x = "X-coordinate",
y = "Y-coordinate",
color = "Cluster") +
coord_equal()
# Create a text grob for the result
result_grob <- grid::textGrob(result_text, gp = grid::gpar(fontsize = 14, fontfamily = "Arial"))
# Arrange the plot and the result
gridExtra::grid.arrange(plot, result_grob, ncol = 1, heights = c(3, 1))

source("~/GitHub/DBI-guide/bin/describe_clustering_result.R")
source("~/GitHub/DBI-guide/bin/Cardiac_arrest.R")
source("~/GitHub/DBI-guide/bin/describe_clustering_result.R")
source("~/GitHub/DBI-guide/bin/Diabetes.R")
#Script where I load an EHRs document(diabetes_type1) and apply the kmeans clustering
#and my DBI function. Then I save everything on a couple of csv files
#Loading data
mydata<-read.csv("diabetes_type1.csv")
#getting kmeans labels
km_labels<-kmeans_labels(mydata)
#getting hclust labels
hc_labels<-hclust_labels(mydata)
#Getting dbscan parameters
eps<- 25               #radius
minPts<-2             #minimal number of neighbours
#Setting the case
case <- "Diabetes"
#getting dbscan labels
dbsc_lab<-dbscan_labels(mydata,eps,minPts,case)
# Calculate the four indexes
indexes<-DBI_EHRs(mydata,km_labels,hc_labels,dbsc_lab)
#binding clusterings for printing
labels<-list(mydata,km_labels,hc_labels,dbsc_lab)
#Find the highest DBI scores
highest_DBI_result <- find_highest_DBI(indexes)
#Calculate cardinality of clusters
cardinality_proportions <- calculate_cardinality_proportion(mydata,km_labels,hc_labels,dbsc_lab)
#Plot the result
plot_cluster_percentages(cardinality_proportions)
#Compare clusterings in a chart
compare_clusterings(labels)
#Exctract information DBI uses
extracted_info <- extract_clustering_info(mydata, labels)
# Open a connection to a text file
sink("Diabetes_type1_info.txt")
# Print the result
print(highest_DBI_result)
# Print cardinality proportions
print(cardinality_proportions)
# Print the information
print(extracted_info)
# Close the connection
sink()
describe_clustering_result(highest_DBI_result,1)
# Add name for saving!! This is the data csv print
write.csv(labels, file="Diabetes_type1+labels.csv")
# Add name for saving!! This is the DBI evaluation csv print
write.csv(indexes, file="Diabetes_type1_DBI.csv")
#Script where I load an EHRs document(depression_heart_failure) and apply the kmeans clustering
#and my DBI function. Then I save everything on a couple of csv files
#I had to get rid of id column since it didnt make any sense with the clustering
#Loading data
mydata0<-read.csv("depression_heart_failure.csv")
#Getting rid of id column
mydata<-mydata0[,2:ncol(mydata0)]
#getting kmeans labels
km_labels<-kmeans_labels(mydata)
#getting hclust labels
hc_labels<-hclust_labels(mydata)
#Getting dbscan parameters
eps<- 60              #radius
minPts<-8           #minimal number of neighbours
#Setting the case
case <- "Heart_failure"
#getting dbscan labels
dbsc_lab<-dbscan_labels(mydata,eps,minPts,case)
# Calculate the four indexes
indexes<-DBI_EHRs(mydata,km_labels,hc_labels,dbsc_lab)
#binding clusterings for printing
labels<-list(mydata,km_labels,hc_labels,dbsc_lab)
#Find the highest DBI scores
highest_DBI_result <- find_highest_DBI(indexes)
#Calculate cardinality of clusters
cardinality_proportions <- calculate_cardinality_proportion(mydata,km_labels,hc_labels,dbsc_lab)
#Plot the result
plot_cluster_percentages(cardinality_proportions)
#Compare clusterings in a chart
compare_clusterings(labels)
#Exctract information DBI uses
extracted_info <- extract_clustering_info(mydata, labels)
# Open a connection to a text file
sink("Depression_Heart_Failure_info.txt")
# Print the result
print(highest_DBI_result)
# Print cardinality proportions
print(cardinality_proportions)
# Print the information
print(extracted_info)
# Close the connection
sink()
describe_clustering_result(highest_DBI_result,3)
# Add name for saving!! This is the data csv print
write.csv(labels, file="Depression_Heart_Failure+labels.csv")
# Add name for saving!! This is the DBI evaluation csv print
write.csv(indexes, file="Depression_Heart_Failure_DBI.csv")
#Script where I load an EHRs document(Sepsis) and apply the kmeans clustering
#and my DBI function. Then I save everything on a couple of csv files
#Loading data
mydata<-read.csv("Sepsis.csv")
#getting kmeans labels
km_labels<-kmeans_labels(mydata)
#getting hclust labels
hc_labels<-hclust_labels(mydata)
#Getting dbscan parameters(I struggled to find better ones)
eps<- 30              #radius
minPts<-10            #minimal number of neighbours
#Setting the case
case <- "Sepsis"
#getting dbscan labels
dbsc_lab<-dbscan_labels(mydata,eps,minPts,case)
# Calculate the four indexes
indexes<-DBI_EHRs(mydata,km_labels,hc_labels,dbsc_lab)
#binding clusterings for printing
labels<-list(mydata,km_labels,hc_labels,dbsc_lab)
#Calculate cardinality of clusters
cardinality_proportions <- calculate_cardinality_proportion(mydata,km_labels,hc_labels,dbsc_lab)
#Print and plot the result
plot_cluster_percentages(cardinality_proportions)
#Compare clusterings in a chart
compare_clusterings(labels)
#Exctract information DBI uses
extracted_info <- extract_clustering_info(mydata, labels)
#Find the highest DBI scores
highest_DBI_result <- find_highest_DBI(indexes)
# Open a connection to a text file
sink("Sepsis_info.txt")
# Print the result
print(highest_DBI_result)
# Print cardinality proportions
print(cardinality_proportions)
# Print the information
print(extracted_info)
# Close the connection
sink()
describe_clustering_result(highest_DBI_result,5)
# Add name for saving!! This is the data csv print
write.csv(labels, file="Sepsis+labels.csv")
# Add name for saving!! This is the DBI evaluation csv print
write.csv(indexes, file="Sepsis_DBI.csv")
#Script where I load an EHRs document(neuroblastoma) and apply
#the clustering algorithms and my DBI function.
#Then I save everything on a couple of csv files
#I had to get rid of several void rows in the end of the file
#Loading data
mydata<-read.csv("neuroblastoma.csv")
#getting kmeans labels
km_labels<-kmeans_labels(mydata)
#getting hclust labels
hc_labels<-hclust_labels(mydata)
#Getting dbscan parameters
eps<- 3              #radius
minPts<-10           #minimal number of neighbours
#Setting the case
case <- "Neuroblastoma"
#getting dbscan labels
dbsc_lab<-dbscan_labels(mydata,eps,minPts,case)
# Calculate the four indexes
indexes<-DBI_EHRs(mydata,km_labels,hc_labels,dbsc_lab)
#binding clusterings for printing
labels<-list(mydata,km_labels,hc_labels,dbsc_lab)
#Find the highest DBI scores
highest_DBI_result <- find_highest_DBI(indexes)
#Calculate cardinality of clusters
cardinality_proportions <- calculate_cardinality_proportion(mydata,km_labels,hc_labels,dbsc_lab)
#Plot the result
plot_cluster_percentages(cardinality_proportions)
#Compare clusterings in a chart
compare_clusterings(labels)
#Exctract information DBI uses
extracted_info <- extract_clustering_info(mydata, labels)
# Open a connection to a text file
sink("Neuroblastoma_info.txt")
# Print the result
print(highest_DBI_result)
# Print cardinality proportions
print(cardinality_proportions)
# Print the information
print(extracted_info)
# Close the connection
sink()
describe_clustering_result(highest_DBI_result,4)
# Add name for saving!! This is the data csv print
write.csv(labels, file="Neuroblastoma+labels.csv")
# Add name for saving!! This is the DBI evaluation csv print
write.csv(indexes, file="Neuroblastoma_DBI.csv")
#Script where I load an EHRs document(Spain_cardiac_arrest) and apply the kmeans clustering
#and my DBI function. Then I save everything on a couple of csv files
#!!I had to delete some rows caused by missing data!!
#(rows: 52 203 221 234 298 391)
#Loading data
mydata<-read.csv("Spain_cardiac_arrest.csv")
#getting kmeans labels
km_labels<-kmeans_labels(mydata)
#getting hclust labels
hc_labels<-hclust_labels(mydata)
#Getting dbscan parameters
eps<- 3.5             #Radius
minPts<-5            #Minimal number of neighbours
#Setting the case
case <- "Cardiac_arrest"
#getting dbscan labels
dbsc_lab<-dbscan_labels(mydata,eps,minPts,case)
# Calculate the four indexes
indexes<-DBI_EHRs(mydata,km_labels,hc_labels,dbsc_lab)
#binding clusterings for printing
labels<-list(mydata,km_labels,hc_labels,dbsc_lab)
#Find the highest DBI scores
highest_DBI_result <- find_highest_DBI(indexes)
#Calculate cardinality of clusters
cardinality_proportions <- calculate_cardinality_proportion(mydata,km_labels,hc_labels,dbsc_lab)
#Plot the result
plot_cluster_percentages(cardinality_proportions)
#Compare clusterings in a chart
compare_clusterings(labels)
#Exctract information DBI uses
extracted_info <- extract_clustering_info(mydata, labels)
# Open a connection to a text file
sink("Spain_cardiac_arrest_info.txt")
# Print the result
print(highest_DBI_result)
# Print cardinality proportions
print(cardinality_proportions)
# Print the information
print(extracted_info)
# Close the connection
sink()
describe_clustering_result(highest_DBI_result,2)
# Add name for saving!! This is the data csv print
write.csv(labels, file="Spain_cardiac_arrest+labels.csv")
# Add name for saving!! This is the DBI evaluation csv print
write.csv(indexes, file="Spain_cardiac_arrest_DBI.csv")
#Script where I load an EHRs document(diabetes_type1) and apply the kmeans clustering
#and my DBI function. Then I save everything on a couple of csv files
#Loading data
mydata<-read.csv("diabetes_type1.csv")
#getting kmeans labels
km_labels<-kmeans_labels(mydata)
#getting hclust labels
hc_labels<-hclust_labels(mydata)
#Getting dbscan parameters
eps<- 25               #radius
minPts<-2             #minimal number of neighbours
#Setting the case
case <- "Diabetes"
#getting dbscan labels
dbsc_lab<-dbscan_labels(mydata,eps,minPts,case)
# Calculate the four indexes
indexes<-DBI_EHRs(mydata,km_labels,hc_labels,dbsc_lab)
#binding clusterings for printing
labels<-list(mydata,km_labels,hc_labels,dbsc_lab)
#Find the highest DBI scores
highest_DBI_result <- find_highest_DBI(indexes)
#Calculate cardinality of clusters
cardinality_proportions <- calculate_cardinality_proportion(mydata,km_labels,hc_labels,dbsc_lab)
#Plot the result
plot_cluster_percentages(cardinality_proportions)
#Compare clusterings in a chart
compare_clusterings(labels)
#Exctract information DBI uses
extracted_info <- extract_clustering_info(mydata, labels)
# Open a connection to a text file
sink("Diabetes_type1_info.txt")
# Print the result
print(highest_DBI_result)
# Print cardinality proportions
print(cardinality_proportions)
# Print the information
print(extracted_info)
# Close the connection
sink()
describe_clustering_result(highest_DBI_result,1)
# Add name for saving!! This is the data csv print
write.csv(labels, file="Diabetes_type1+labels.csv")
# Add name for saving!! This is the DBI evaluation csv print
write.csv(indexes, file="Diabetes_type1_DBI.csv")
source("~/GitHub/DBI-guide/bin/Diabetes.R")
source("~/GitHub/DBI-guide/bin/Cardiac_arrest.R")
source("~/GitHub/DBI-guide/bin/Neuroblastoma.R")
source("~/GitHub/DBI-guide/bin/Depression_HeartFailure.R")
source("~/GitHub/DBI-guide/bin/Sepsis.R")
source("~/GitHub/DBI-guide/bin/Depression_HeartFailure.R")
source("~/GitHub/DBI-guide/bin/Depression_HeartFailure.R")
source("~/GitHub/DBI-guide/bin/Depression_HeartFailure.R")
source("~/GitHub/DBI-guide/bin/Depression_HeartFailure.R")
source("~/GitHub/DBI-guide/bin/Depression_HeartFailure.R")
#Script where I load an EHRs document(depression_heart_failure) and apply the kmeans clustering
#and my DBI function. Then I save everything on a couple of csv files
#I had to get rid of id column since it didnt make any sense with the clustering
#Loading data
mydata0<-read.csv("depression_heart_failure.csv")
#Getting rid of id column
mydata<-mydata0[,2:ncol(mydata0)]
#getting kmeans labels
km_labels<-kmeans_labels(mydata)
#getting hclust labels
hc_labels<-hclust_labels(mydata)
#Getting dbscan parameters
eps<- 60              #radius
minPts<-8           #minimal number of neighbours
#Setting the case
case <- "Heart_failure"
#getting dbscan labels
dbsc_lab<-dbscan_labels(mydata,eps,minPts,case)
# Calculate the four indexes
indexes<-DBI_EHRs(mydata,km_labels,hc_labels,dbsc_lab)
#binding clusterings for printing
labels<-list(mydata,km_labels,hc_labels,dbsc_lab)
#Find the highest DBI scores
highest_DBI_result <- find_highest_DBI(indexes)
#Calculate cardinality of clusters
cardinality_proportions <- calculate_cardinality_proportion(mydata,km_labels,hc_labels,dbsc_lab)
#Plot the result
plot_cluster_percentages(cardinality_proportions)
#Compare clusterings in a chart
compare_clusterings(labels)
#Exctract information DBI uses
extracted_info <- extract_clustering_info(mydata, labels)
# Open a connection to a text file
sink("Depression_Heart_Failure_info.txt")
# Print the result
print(highest_DBI_result)
# Print cardinality proportions
print(cardinality_proportions)
# Print the information
print(extracted_info)
# Close the connection
sink()
# Add name for saving!! This is the data csv print
write.csv(labels, file="Depression_Heart_Failure+labels.csv")
# Add name for saving!! This is the DBI evaluation csv print
write.csv(indexes, file="Depression_Heart_Failure_DBI.csv")
describe_clustering_result(highest_DBI_result,3)
#Script where I load an EHRs document(Sepsis) and apply the kmeans clustering
#and my DBI function. Then I save everything on a couple of csv files
#Loading data
mydata<-read.csv("Sepsis.csv")
#getting kmeans labels
km_labels<-kmeans_labels(mydata)
#getting hclust labels
hc_labels<-hclust_labels(mydata)
#Getting dbscan parameters(I struggled to find better ones)
eps<- 30              #radius
minPts<-10            #minimal number of neighbours
#Setting the case
case <- "Sepsis"
#getting dbscan labels
dbsc_lab<-dbscan_labels(mydata,eps,minPts,case)
# Calculate the four indexes
indexes<-DBI_EHRs(mydata,km_labels,hc_labels,dbsc_lab)
#binding clusterings for printing
labels<-list(mydata,km_labels,hc_labels,dbsc_lab)
#Calculate cardinality of clusters
cardinality_proportions <- calculate_cardinality_proportion(mydata,km_labels,hc_labels,dbsc_lab)
#Print and plot the result
plot_cluster_percentages(cardinality_proportions)
#Compare clusterings in a chart
compare_clusterings(labels)
#Exctract information DBI uses
extracted_info <- extract_clustering_info(mydata, labels)
#Find the highest DBI scores
highest_DBI_result <- find_highest_DBI(indexes)
# Open a connection to a text file
sink("Sepsis_info.txt")
# Print the result
print(highest_DBI_result)
# Print cardinality proportions
print(cardinality_proportions)
# Print the information
print(extracted_info)
# Close the connection
sink()
# Add name for saving!! This is the data csv print
write.csv(labels, file="Sepsis+labels.csv")
# Add name for saving!! This is the DBI evaluation csv print
write.csv(indexes, file="Sepsis_DBI.csv")
describe_clustering_result(highest_DBI_result,5)
#Script where I load an EHRs document(neuroblastoma) and apply
#the clustering algorithms and my DBI function.
#Then I save everything on a couple of csv files
#I had to get rid of several void rows in the end of the file
#Loading data
mydata<-read.csv("neuroblastoma.csv")
#getting kmeans labels
km_labels<-kmeans_labels(mydata)
#getting hclust labels
hc_labels<-hclust_labels(mydata)
#Getting dbscan parameters
eps<- 3              #radius
minPts<-10           #minimal number of neighbours
#Setting the case
case <- "Neuroblastoma"
#getting dbscan labels
dbsc_lab<-dbscan_labels(mydata,eps,minPts,case)
# Calculate the four indexes
indexes<-DBI_EHRs(mydata,km_labels,hc_labels,dbsc_lab)
#binding clusterings for printing
labels<-list(mydata,km_labels,hc_labels,dbsc_lab)
#Find the highest DBI scores
highest_DBI_result <- find_highest_DBI(indexes)
#Calculate cardinality of clusters
cardinality_proportions <- calculate_cardinality_proportion(mydata,km_labels,hc_labels,dbsc_lab)
#Plot the result
plot_cluster_percentages(cardinality_proportions)
#Compare clusterings in a chart
compare_clusterings(labels)
#Exctract information DBI uses
extracted_info <- extract_clustering_info(mydata, labels)
# Open a connection to a text file
sink("Neuroblastoma_info.txt")
# Print the result
print(highest_DBI_result)
# Print cardinality proportions
print(cardinality_proportions)
# Print the information
print(extracted_info)
# Close the connection
sink()
# Add name for saving!! This is the data csv print
write.csv(labels, file="Neuroblastoma+labels.csv")
# Add name for saving!! This is the DBI evaluation csv print
write.csv(indexes, file="Neuroblastoma_DBI.csv")
describe_clustering_result(highest_DBI_result,4)
#Script where I load an EHRs document(Spain_cardiac_arrest) and apply the kmeans clustering
#and my DBI function. Then I save everything on a couple of csv files
#!!I had to delete some rows caused by missing data!!
#(rows: 52 203 221 234 298 391)
#Loading data
mydata<-read.csv("Spain_cardiac_arrest.csv")
#getting kmeans labels
km_labels<-kmeans_labels(mydata)
#getting hclust labels
hc_labels<-hclust_labels(mydata)
#Getting dbscan parameters
eps<- 3.5             #Radius
minPts<-5            #Minimal number of neighbours
#Setting the case
case <- "Cardiac_arrest"
#getting dbscan labels
dbsc_lab<-dbscan_labels(mydata,eps,minPts,case)
# Calculate the four indexes
indexes<-DBI_EHRs(mydata,km_labels,hc_labels,dbsc_lab)
#binding clusterings for printing
labels<-list(mydata,km_labels,hc_labels,dbsc_lab)
#Find the highest DBI scores
highest_DBI_result <- find_highest_DBI(indexes)
#Calculate cardinality of clusters
cardinality_proportions <- calculate_cardinality_proportion(mydata,km_labels,hc_labels,dbsc_lab)
#Plot the result
plot_cluster_percentages(cardinality_proportions)
#Compare clusterings in a chart
compare_clusterings(labels)
#Exctract information DBI uses
extracted_info <- extract_clustering_info(mydata, labels)
# Open a connection to a text file
sink("Spain_cardiac_arrest_info.txt")
# Print the result
print(highest_DBI_result)
# Print cardinality proportions
print(cardinality_proportions)
# Print the information
print(extracted_info)
# Close the connection
sink()
# Add name for saving!! This is the data csv print
write.csv(labels, file="Spain_cardiac_arrest+labels.csv")
# Add name for saving!! This is the DBI evaluation csv print
write.csv(indexes, file="Spain_cardiac_arrest_DBI.csv")
describe_clustering_result(highest_DBI_result,2)
#Script where I load an EHRs document(diabetes_type1) and apply the kmeans clustering
#and my DBI function. Then I save everything on a couple of csv files
#Loading data
mydata<-read.csv("diabetes_type1.csv")
#getting kmeans labels
km_labels<-kmeans_labels(mydata)
#getting hclust labels
hc_labels<-hclust_labels(mydata)
#Getting dbscan parameters
eps<- 25               #radius
minPts<-2             #minimal number of neighbours
#Setting the case
case <- "Diabetes"
#getting dbscan labels
dbsc_lab<-dbscan_labels(mydata,eps,minPts,case)
# Calculate the four indexes
indexes<-DBI_EHRs(mydata,km_labels,hc_labels,dbsc_lab)
#binding clusterings for printing
labels<-list(mydata,km_labels,hc_labels,dbsc_lab)
#Find the highest DBI scores
highest_DBI_result <- find_highest_DBI(indexes)
#Calculate cardinality of clusters
cardinality_proportions <- calculate_cardinality_proportion(mydata,km_labels,hc_labels,dbsc_lab)
#Plot the result
plot_cluster_percentages(cardinality_proportions)
#Compare clusterings in a chart
compare_clusterings(labels)
#Exctract information DBI uses
extracted_info <- extract_clustering_info(mydata, labels)
# Open a connection to a text file
sink("Diabetes_type1_info.txt")
# Print the result
print(highest_DBI_result)
# Print cardinality proportions
print(cardinality_proportions)
# Print the information
print(extracted_info)
# Close the connection
sink()
# Add name for saving!! This is the data csv print
write.csv(labels, file="Diabetes_type1+labels.csv")
# Add name for saving!! This is the DBI evaluation csv print
write.csv(indexes, file="Diabetes_type1_DBI.csv")
describe_clustering_result(highest_DBI_result,1)
